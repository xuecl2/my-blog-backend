19:39:42.174 INFO  xuecl.myblog.MyblogApplication - Starting MyblogApplication on DESKTOP-O9S7IM3 with PID 13896 (D:\Software\java-2019-062\workspace\myblog\target\classes started by xuecl in D:\Software\java-2019-062\workspace\myblog)
19:39:42.231 INFO  xuecl.myblog.MyblogApplication - No active profile set, falling back to default profiles: default
19:39:48.125 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8080 (http)
19:39:48.143 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
19:39:48.144 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
19:39:48.144 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.33]
19:39:48.310 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
19:39:48.311 INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 5933 ms
19:39:48.754 INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
19:39:48.896 INFO  o.s.b.a.w.s.WelcomePageHandlerMapping - Adding welcome page: class path resource [static/index.html]
19:39:49.090 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
19:39:49.143 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 8080 (http) with context path ''
19:39:49.148 INFO  xuecl.myblog.MyblogApplication - Started MyblogApplication in 8.119 seconds (JVM running for 8.739)
19:42:40.298 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
19:42:40.298 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
19:42:40.487 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 189 ms
19:42:40.998 INFO  x.myblog.controller.BaseController - {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:42:41.073 INFO  x.myblog.controller.BaseController - 输入参数 {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:42:41.073 INFO  x.myblog.controller.BaseController - queryConditionSql:  1 = 1 
19:42:41.109 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
19:42:41.453 INFO  com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Driver does not support get/set network timeout for connections. (com.mysql.jdbc.JDBC4Connection.getNetworkTimeout()I)
19:42:41.462 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
19:42:45.199 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:42:45.203 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:42:49.786 INFO  x.myblog.controller.BaseController - {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:42:49.786 INFO  x.myblog.controller.BaseController - 输入参数 {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:42:49.786 INFO  x.myblog.controller.BaseController - queryConditionSql:  1 = 1 
19:42:51.017 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:42:51.019 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:44:08.954 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:44:08.955 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:44:11.131 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:44:11.132 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:46:35.018 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:46:35.019 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:46:41.898 INFO  x.myblog.controller.BaseController - {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:46:41.900 INFO  x.myblog.controller.BaseController - 输入参数 {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:46:41.900 INFO  x.myblog.controller.BaseController - queryConditionSql:  1 = 1 
19:46:45.251 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:46:45.252 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:46:47.899 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:46:47.900 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:49:27.388 INFO  x.myblog.controller.BaseController - {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:49:27.389 INFO  x.myblog.controller.BaseController - 输入参数 {"title":"","keyWord":"","modifyDate":"","operation":"query"}
19:49:27.389 INFO  x.myblog.controller.BaseController - queryConditionSql:  1 = 1 
19:49:29.012 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:49:29.014 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:49:31.287 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:49:31.288 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:49:34.294 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:49:34.297 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:49:35.987 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
19:49:35.988 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
19:50:00.311 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:50:00.313 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:50:57.381 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节得\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:50:57.382 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节得\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:00.897 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:00.898 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] * [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:21.442 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:21.444 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [ ] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:36.309 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
19:51:36.310 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:05:13.131 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:05:13.133 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:05:20.564 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:05:20.564 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:07:28.519 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:07:28.520 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:11:49.169 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:11:49.170 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:11:49.244 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:11:49.246 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:12:03.227 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:12:03.229 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:12:30.912 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:12:30.913 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:08.138 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:08.140 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:15.165 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:15.165 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:17.541 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:17.542 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:23.761 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？1","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:13:23.762 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？1","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:13:25.787 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:25.788 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:28.091 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:28.093 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:41.241 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:41.242 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:42.633 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:42.634 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:44.618 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:13:44.619 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [ ] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:13:46.643 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:46.644 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:13:48.019 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:13:48.020 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:14:02.358 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:14:02.359 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:14:16.942 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:14:16.943 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:15:24.526 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:15:24.527 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:15:26.517 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:15:26.518 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:15:34.476 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:15:34.477 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:15:44.357 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:15:44.358 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:15:58.468 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:15:58.469 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * 每次保存的时候，后端把保存后的内容返回，前端存储。\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:17:38.770 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:17:38.771 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * ~~查询页面和编辑页面可以使用同一个vue文件~~\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:17:41.094 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:17:41.095 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:18:45.428 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:18:45.429 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:19:53.291 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:19:53.292 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:20:32.443 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:20:32.444 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:20:43.697 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:20:43.698 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:20:56.943 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:20:56.944 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:21:18.728 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？\n    * 主题切换功能？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:21:18.730 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？\n    * 主题切换功能？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:21:21.972 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:21:21.973 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:32:46.181 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:32:46.182 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:34:17.939 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:34:17.941 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:34:17.994 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:34:17.995 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:36:10.909 INFO  x.myblog.controller.BaseController - {"title":"","keyWord":"","modifyDate":"","operation":"query"}
20:36:10.910 INFO  x.myblog.controller.BaseController - 输入参数 {"title":"","keyWord":"","modifyDate":"","operation":"query"}
20:36:10.910 INFO  x.myblog.controller.BaseController - queryConditionSql:  1 = 1 
20:36:12.369 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:36:12.370 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:36:14.301 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:36:14.301 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
20:36:18.215 INFO  x.myblog.controller.BaseController - {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？\n    * 主题切换功能？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:36:18.216 INFO  x.myblog.controller.BaseController - 输入参数 {"id":60,"title":"优先度事项","keyWord":null,"content":"* [ ] git的学习，毕竟没有代码管理工具没法更新代码\n* [x] 新增blog时，原本已删除的标题也不能使用的bug修复下\n* [x] 查看的页面完成，查看文章的时候没有必要将编辑部分也展示出来。看有没有办法像网上的那些教程一样在查看的时候分成一节一节的\n    * 查询页面和编辑页面可以使用同一个vue文件\n    * 先进入查询页面，在查询页面中可以切换为编辑模式\n    * 暂时无法做成网上文档那种能分章节的\n* [x] 劫持ctrl s快捷键用于保存文章\n* [x] 文章保存完成之前如果退出页面要有提示\n    * ~~每次保存的时候，后端把保存后的内容返回，前端存储。~~ 这里实际做法是每次提交和刷新的时候把文章内容存下来，离开页面时对比当前文章的内容和之前存下来的内容是否一致\n    * 前端要退出的时候将编辑器里的内容同之前后端返回的内容对比看是否一致,不一致要提示\n* [ ] 每个api加上防抖\n* [ ] electron的学习，好像能将前端项目打包成exe\n* [ ] 前端的响应式布局\n* [ ] 考虑下备份功能，程序有bug的话一不下心就把内容全删了，坑的一笔\n* [ ] 考虑下新的功能模块。随想，知识，action-list应该分为三个模块\n* [ ] 后端的日志考虑下怎么打印更合理，每个功能或者每个接口单独输出日志？\n* [ ] 学习下后端项目要怎么部署，不能每次开eclipse启动项目。部署之后要检查下图片的路径，和之前可能会不一样\n* [ ] 增加登陆功能\n* [ ] 项目美化下，能不能弄个黑色背景？\n    * 主题切换功能？","digest":"项目的优先度列表","user":"xuecl","operation":"save"}
20:37:42.260 INFO  x.myblog.controller.BaseController - {"operation":"queryById","id":60}
20:37:42.261 INFO  x.myblog.controller.BaseController - 输入参数 {"operation":"queryById","id":60}
